// <auto-generated />
using System;
using BookShopAPI.Persistence.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookShopAPI.Persistence.EntityFramework.Migrations
{
    [DbContext(typeof(BookShopDbContext))]
    partial class BookShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("int");

                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBook");
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.HasKey("BooksId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BookCategory");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressTitle")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VarChar");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 513, DateTimeKind.Local).AddTicks(9870));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("VarChar");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VarChar");

                    b.Property<string>("Neighbourhood")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<string>("OpenAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VarChar");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VarChar");

                    b.Property<bool>("Selected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorPictureFileId")
                        .HasColumnType("int");

                    b.Property<string>("Autobiography")
                        .IsRequired()
                        .HasColumnType("VarChar(MAX)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 514, DateTimeKind.Local).AddTicks(5629));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VarChar");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorPictureFileId")
                        .IsUnique()
                        .HasFilter("[AuthorPictureFileId] IS NOT NULL");

                    b.ToTable("Authors", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 514, DateTimeKind.Local).AddTicks(9640));

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool?>("Visible")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Baskets", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.BasketItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 515, DateTimeKind.Local).AddTicks(4276));

                    b.Property<byte>("Quantity")
                        .HasColumnType("TinyInt");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("BookId");

                    b.ToTable("BasketItems", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 515, DateTimeKind.Local).AddTicks(9071));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VarChar(MAX)");

                    b.Property<string>("Dimension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("VarChar");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("PageOfNumber")
                        .HasColumnType("Int");

                    b.Property<string>("PaperType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VarChar");

                    b.Property<decimal>("Price")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("ReleaseDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("Char");

                    b.Property<string>("SkinType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VarChar");

                    b.Property<short>("Stock")
                        .HasColumnType("SmallInt");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.BookPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("BookPictureFileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 516, DateTimeKind.Local).AddTicks(5989));

                    b.Property<byte>("ShowOrder")
                        .HasColumnType("TinyInt");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("BookPictureFileId")
                        .IsUnique();

                    b.ToTable("BookPictures", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("VarChar");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 516, DateTimeKind.Local).AddTicks(8539));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<int?>("ParentId")
                        .HasColumnType("Int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 517, DateTimeKind.Local).AddTicks(46));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VarChar");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.ToTable("Claims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Customer"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.CommentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("VarChar");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 517, DateTimeKind.Local).AddTicks(6696));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<int?>("ParentCommentId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.CommentRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 518, DateTimeKind.Local).AddTicks(1529));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.Property<bool>("Useful")
                        .HasColumnType("Bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentRatings", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.FileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 518, DateTimeKind.Local).AddTicks(4119));

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("VarChar");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("VarChar(MAX)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.ToTable("Files", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 518, DateTimeKind.Local).AddTicks(6850));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.ToTable("Languages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Türkçe"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İngilizce"
                        });
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.MailAuthentication", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("ActivationDuration")
                        .HasColumnType("DateTime2");

                    b.Property<string>("ActivationKey")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("Char");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 519, DateTimeKind.Local).AddTicks(2513));

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.ToTable("MailAuthentications", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.MailComfirmCode", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ComfirmCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("Char");

                    b.Property<DateTime>("ComfirmDuration")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 519, DateTimeKind.Local).AddTicks(8694));

                    b.Property<bool>("IsComfirm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.ToTable("MailComfirmCodes", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<bool>("Comfirm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ComfirmedDate")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 520, DateTimeKind.Local).AddTicks(7572));

                    b.Property<bool>("Pay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("DateTime2");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("int");

                    b.Property<bool>("Send")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("SendedDate")
                        .HasColumnType("DateTime2");

                    b.Property<decimal>("TotalPayment")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BasketId")
                        .IsUnique();

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.OtpAuthentication", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 521, DateTimeKind.Local).AddTicks(3631));

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Bit")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("SecretKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VarBinary");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.ToTable("OtpAuthentications", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.OtpRecoveryCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("Char");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 521, DateTimeKind.Local).AddTicks(7725));

                    b.Property<bool>("IsUse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Bit")
                        .HasDefaultValue(false);

                    b.Property<int>("OtpAuthenticationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.HasIndex("OtpAuthenticationId");

                    b.ToTable("OtpRecoveryCodes", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.PhoneNumberEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 522, DateTimeKind.Local).AddTicks(1671));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("Char");

                    b.Property<string>("PhoneTitle")
                        .HasMaxLength(45)
                        .HasColumnType("VarChar");

                    b.Property<bool>("Selected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PhoneNumbers", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 523, DateTimeKind.Local).AddTicks(1781));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<int>("PublisherLogoFileId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.HasIndex("PublisherLogoFileId")
                        .IsUnique();

                    b.ToTable("Publishers", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 523, DateTimeKind.Local).AddTicks(7648));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("Char");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthenticatorType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("Int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 525, DateTimeKind.Local).AddTicks(2480));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VarChar");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VarChar");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VarBinary");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VarBinary");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.Property<int?>("UserAvatarFileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserAvatarFileId")
                        .IsUnique()
                        .HasFilter("[UserAvatarFileId] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(2023, 9, 13, 10, 38, 23, 525, DateTimeKind.Local).AddTicks(4463),
                            Email = "BookShopAdmin@gmail.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = new byte[] { 147, 155, 58, 230, 11, 234, 132, 56, 24, 139, 169, 140, 211, 166, 99, 51, 138, 163, 52, 19, 76, 47, 255, 103, 171, 116, 48, 184, 87, 23, 22, 150, 143, 141, 96, 235, 248, 73, 35, 251, 149, 220, 213, 92, 5, 15, 14, 40, 232, 82, 242, 14, 116, 232, 32, 1, 254, 37, 28, 68, 25, 87, 51, 10 },
                            PasswordSalt = new byte[] { 150, 215, 103, 155, 152, 43, 2, 91, 12, 64, 73, 72, 28, 55, 16, 227, 59, 54, 186, 131, 199, 130, 171, 201, 34, 183, 88, 82, 246, 91, 3, 151, 163, 195, 73, 224, 54, 108, 205, 147, 148, 108, 149, 99, 86, 229, 196, 93, 44, 68, 40, 88, 45, 126, 128, 131, 248, 16, 8, 38, 212, 207, 210, 99, 118, 167, 168, 184, 123, 81, 138, 93, 253, 158, 104, 191, 253, 202, 116, 234, 28, 5, 82, 227, 56, 37, 221, 196, 1, 22, 150, 230, 148, 234, 61, 230, 81, 119, 207, 115, 168, 182, 80, 18, 62, 68, 149, 41, 163, 45, 240, 140, 208, 123, 205, 61, 59, 19, 121, 115, 254, 243, 111, 35, 123, 12, 28, 119 }
                        });
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 9, 13, 10, 38, 23, 524, DateTimeKind.Local).AddTicks(1152));

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimId = 2,
                            CreatedDate = new DateTime(2023, 9, 13, 10, 38, 23, 525, DateTimeKind.Local).AddTicks(3604),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Author", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.FileEntity", "File")
                        .WithOne("Author")
                        .HasForeignKey("BookShopAPI.Domain.Entities.Author", "AuthorPictureFileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Basket", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithMany("Baskets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.BasketItem", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.Basket", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.Book", "Book")
                        .WithMany("BasketItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Book", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.Language", "Language")
                        .WithMany("Books")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.BookPicture", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.Book", "Book")
                        .WithMany("BookPictures")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.FileEntity", "File")
                        .WithOne("BookPicture")
                        .HasForeignKey("BookShopAPI.Domain.Entities.BookPicture", "BookPictureFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("File");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.CommentEntity", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.Book", "Book")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.CommentRating", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.CommentEntity", "Comment")
                        .WithMany("CommentRatings")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithMany("CommentRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.MailAuthentication", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithOne("MailAuthentication")
                        .HasForeignKey("BookShopAPI.Domain.Entities.MailAuthentication", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.MailComfirmCode", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithOne("MailComfirmCode")
                        .HasForeignKey("BookShopAPI.Domain.Entities.MailComfirmCode", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.Basket", "Basket")
                        .WithOne("Order")
                        .HasForeignKey("BookShopAPI.Domain.Entities.Order", "BasketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.PhoneNumberEntity", "PhoneNumber")
                        .WithMany("Orders")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Basket");

                    b.Navigation("PhoneNumber");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.OtpAuthentication", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithOne("OtpAuthentication")
                        .HasForeignKey("BookShopAPI.Domain.Entities.OtpAuthentication", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.OtpRecoveryCode", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.OtpAuthentication", "OtpAuthentication")
                        .WithMany("OtpRecoveryCodes")
                        .HasForeignKey("OtpAuthenticationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OtpAuthentication");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.PhoneNumberEntity", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Publisher", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.FileEntity", "File")
                        .WithOne("Publisher")
                        .HasForeignKey("BookShopAPI.Domain.Entities.Publisher", "PublisherLogoFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithOne("RefreshToken")
                        .HasForeignKey("BookShopAPI.Domain.Entities.RefreshToken", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.User", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.FileEntity", "File")
                        .WithOne("User")
                        .HasForeignKey("BookShopAPI.Domain.Entities.User", "UserAvatarFileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.UserClaim", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.Claim", "Claim")
                        .WithMany("UserClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithOne("UserClaim")
                        .HasForeignKey("BookShopAPI.Domain.Entities.UserClaim", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Basket", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Book", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("BookPictures");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Claim", b =>
                {
                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.CommentEntity", b =>
                {
                    b.Navigation("CommentRatings");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.FileEntity", b =>
                {
                    b.Navigation("Author");

                    b.Navigation("BookPicture");

                    b.Navigation("Publisher");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Language", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.OtpAuthentication", b =>
                {
                    b.Navigation("OtpRecoveryCodes");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.PhoneNumberEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Baskets");

                    b.Navigation("CommentRatings");

                    b.Navigation("Comments");

                    b.Navigation("MailAuthentication");

                    b.Navigation("MailComfirmCode");

                    b.Navigation("Orders");

                    b.Navigation("OtpAuthentication");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("RefreshToken");

                    b.Navigation("UserClaim");
                });
#pragma warning restore 612, 618
        }
    }
}
