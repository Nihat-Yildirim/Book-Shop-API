// <auto-generated />
using System;
using BookShopAPI.Persistence.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookShopAPI.Persistence.EntityFramework.Migrations
{
    [DbContext(typeof(BookShopDbContext))]
    [Migration("20231109105059_mig_4")]
    partial class mig_4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("int");

                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBook");
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.HasKey("BooksId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BookCategory");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressTitle")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VarChar");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 17, DateTimeKind.Local).AddTicks(5865));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("VarChar");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int>("NeighbourhoodId")
                        .HasColumnType("int");

                    b.Property<string>("OpenAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VarChar");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<bool>("Selected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NeighbourhoodId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorPictureFileId")
                        .HasColumnType("int");

                    b.Property<string>("Autobiography")
                        .IsRequired()
                        .HasColumnType("VarChar(MAX)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 20, DateTimeKind.Local).AddTicks(7763));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VarChar");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorPictureFileId")
                        .IsUnique()
                        .HasFilter("[AuthorPictureFileId] IS NOT NULL");

                    b.ToTable("Authors", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 23, DateTimeKind.Local).AddTicks(7883));

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool?>("Visible")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Baskets", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.BasketItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 26, DateTimeKind.Local).AddTicks(8245));

                    b.Property<byte>("Quantity")
                        .HasColumnType("TinyInt");

                    b.Property<bool>("Selected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("BookId");

                    b.ToTable("BasketItems", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 29, DateTimeKind.Local).AddTicks(3798));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VarChar(MAX)");

                    b.Property<string>("Dimension")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VarChar");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("PageOfNumber")
                        .HasColumnType("Int");

                    b.Property<string>("PaperType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VarChar");

                    b.Property<decimal>("Price")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("ReleaseDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("Char");

                    b.Property<string>("SkinType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VarChar");

                    b.Property<short>("Stock")
                        .HasColumnType("SmallInt");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.BookPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("BookPictureFileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 34, DateTimeKind.Local).AddTicks(647));

                    b.Property<byte>("ShowOrder")
                        .HasColumnType("TinyInt");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("BookPictureFileId")
                        .IsUnique();

                    b.ToTable("BookPictures", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("VarChar");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 35, DateTimeKind.Local).AddTicks(1405));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<int?>("ParentId")
                        .HasColumnType("Int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Edebiyat",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Tarih",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Siyaset",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = 0
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Ekonomi",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = 0
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Eğitim",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = 0
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Sınav",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = 0
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Ders Kitapları",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = 0
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Kişisel Gelişim",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = 0
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Çocuk Kitapları",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = 0
                        },
                        new
                        {
                            Id = 10,
                            CategoryName = "Dünya Klasikleri",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = 0
                        },
                        new
                        {
                            Id = 11,
                            CategoryName = "Mitoloji Efsane",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = 0
                        },
                        new
                        {
                            Id = 12,
                            CategoryName = "Roman",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = 1
                        },
                        new
                        {
                            Id = 13,
                            CategoryName = "Öykü",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = 1
                        },
                        new
                        {
                            Id = 14,
                            CategoryName = "Masal",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = 1
                        },
                        new
                        {
                            Id = 15,
                            CategoryName = "Deneme",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = 1
                        },
                        new
                        {
                            Id = 16,
                            CategoryName = "Biyografi",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = 1
                        });
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 35, DateTimeKind.Local).AddTicks(8491));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VarChar");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.ToTable("Claims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Customer"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.CommentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("VarChar");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 41, DateTimeKind.Local).AddTicks(937));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<int?>("ParentCommentId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.CommentRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 43, DateTimeKind.Local).AddTicks(7502));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.Property<bool>("Useful")
                        .HasColumnType("Bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentRatings", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 45, DateTimeKind.Local).AddTicks(7685));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.FileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 47, DateTimeKind.Local).AddTicks(6334));

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("VarChar");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("VarChar(MAX)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.ToTable("Files", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 49, DateTimeKind.Local).AddTicks(5597));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.ToTable("Languages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Türkçe"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İngilizce"
                        });
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.MailAuthentication", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("ActivationDuration")
                        .HasColumnType("DateTime2");

                    b.Property<string>("ActivationKey")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("Char");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 52, DateTimeKind.Local).AddTicks(5704));

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.ToTable("MailAuthentications", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.MailComfirmCode", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ComfirmCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("Char");

                    b.Property<DateTime>("ComfirmDuration")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 56, DateTimeKind.Local).AddTicks(5452));

                    b.Property<bool>("IsComfirm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.ToTable("MailComfirmCodes", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Neighbourhood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 58, DateTimeKind.Local).AddTicks(7443));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VarChar");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Neighbourhoods", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<bool>("Comfirm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ComfirmedDate")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 63, DateTimeKind.Local).AddTicks(9491));

                    b.Property<bool>("Pay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("DateTime2");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("int");

                    b.Property<bool>("Send")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("SendedDate")
                        .HasColumnType("DateTime2");

                    b.Property<decimal>("TotalPayment")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BasketId")
                        .IsUnique();

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.OtpAuthentication", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 67, DateTimeKind.Local).AddTicks(6498));

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Bit")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("SecretKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VarBinary");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.ToTable("OtpAuthentications", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.OtpRecoveryCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("Char");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 69, DateTimeKind.Local).AddTicks(5798));

                    b.Property<int>("OtpAuthenticationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.HasIndex("OtpAuthenticationId");

                    b.ToTable("OtpRecoveryCodes", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.PhoneNumberEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 72, DateTimeKind.Local).AddTicks(9732));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("Char");

                    b.Property<string>("PhoneTitle")
                        .HasMaxLength(45)
                        .HasColumnType("VarChar");

                    b.Property<bool>("Selected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PhoneNumbers", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 74, DateTimeKind.Local).AddTicks(7610));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VarChar");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.ToTable("Provinces", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 80, DateTimeKind.Local).AddTicks(1463));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<int>("PublisherLogoFileId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.HasIndex("PublisherLogoFileId")
                        .IsUnique();

                    b.ToTable("Publishers", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 83, DateTimeKind.Local).AddTicks(9762));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("Char");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthenticatorType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("Int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 91, DateTimeKind.Local).AddTicks(8924));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VarChar");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VarChar");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VarBinary");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VarBinary");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.Property<int?>("UserAvatarFileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserAvatarFileId")
                        .IsUnique()
                        .HasFilter("[UserAvatarFileId] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(2023, 11, 9, 13, 50, 58, 93, DateTimeKind.Local).AddTicks(292),
                            Email = "BookShopAdmin@gmail.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = new byte[] { 146, 143, 197, 246, 79, 195, 86, 33, 189, 112, 141, 207, 185, 233, 195, 181, 94, 118, 126, 61, 204, 149, 15, 202, 45, 32, 237, 115, 175, 91, 236, 20, 214, 118, 109, 31, 91, 73, 198, 211, 76, 141, 170, 140, 56, 123, 209, 135, 113, 70, 139, 42, 0, 129, 50, 211, 201, 36, 125, 169, 5, 212, 121, 161 },
                            PasswordSalt = new byte[] { 96, 108, 96, 148, 142, 134, 98, 66, 100, 153, 3, 230, 104, 213, 147, 135, 159, 232, 102, 63, 145, 48, 75, 126, 160, 120, 235, 86, 251, 81, 144, 103, 170, 85, 244, 12, 24, 78, 193, 122, 74, 62, 78, 208, 148, 80, 125, 220, 227, 160, 85, 251, 208, 212, 153, 86, 125, 195, 15, 215, 89, 40, 11, 154, 40, 215, 17, 150, 121, 121, 221, 131, 56, 86, 238, 18, 138, 184, 137, 195, 135, 48, 174, 55, 171, 65, 47, 141, 18, 49, 88, 28, 245, 230, 166, 0, 28, 61, 179, 101, 168, 221, 218, 237, 70, 167, 33, 194, 109, 3, 195, 16, 35, 228, 181, 130, 139, 226, 10, 214, 255, 197, 102, 28, 255, 66, 51, 225 }
                        });
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime2")
                        .HasDefaultValue(new DateTime(2023, 11, 9, 13, 50, 58, 85, DateTimeKind.Local).AddTicks(7237));

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DateTime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimId = 2,
                            CreatedDate = new DateTime(2023, 11, 9, 13, 50, 58, 92, DateTimeKind.Local).AddTicks(6844),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.District", "District")
                        .WithMany("Addresses")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.Neighbourhood", "Neighbourhood")
                        .WithMany("Addresses")
                        .HasForeignKey("NeighbourhoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.Province", "Province")
                        .WithMany("Addresses")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Neighbourhood");

                    b.Navigation("Province");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Author", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.FileEntity", "File")
                        .WithOne("Author")
                        .HasForeignKey("BookShopAPI.Domain.Entities.Author", "AuthorPictureFileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Basket", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithMany("Baskets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.BasketItem", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.Basket", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.Book", "Book")
                        .WithMany("BasketItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Book", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.Language", "Language")
                        .WithMany("Books")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.BookPicture", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.Book", "Book")
                        .WithMany("BookPictures")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.FileEntity", "File")
                        .WithOne("BookPicture")
                        .HasForeignKey("BookShopAPI.Domain.Entities.BookPicture", "BookPictureFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("File");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.CommentEntity", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.Book", "Book")
                        .WithMany("Comments")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.CommentRating", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.CommentEntity", "Comment")
                        .WithMany("CommentRatings")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithMany("CommentRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.District", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.MailAuthentication", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithOne("MailAuthentication")
                        .HasForeignKey("BookShopAPI.Domain.Entities.MailAuthentication", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.MailComfirmCode", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithOne("MailComfirmCode")
                        .HasForeignKey("BookShopAPI.Domain.Entities.MailComfirmCode", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Neighbourhood", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.District", "District")
                        .WithMany("Neighbourhoods")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.Basket", "Basket")
                        .WithOne("Order")
                        .HasForeignKey("BookShopAPI.Domain.Entities.Order", "BasketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.PhoneNumberEntity", "PhoneNumber")
                        .WithMany("Orders")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Basket");

                    b.Navigation("PhoneNumber");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.OtpAuthentication", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithOne("OtpAuthentication")
                        .HasForeignKey("BookShopAPI.Domain.Entities.OtpAuthentication", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.OtpRecoveryCode", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.OtpAuthentication", "OtpAuthentication")
                        .WithMany("OtpRecoveryCodes")
                        .HasForeignKey("OtpAuthenticationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OtpAuthentication");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.PhoneNumberEntity", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Publisher", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.FileEntity", "File")
                        .WithOne("Publisher")
                        .HasForeignKey("BookShopAPI.Domain.Entities.Publisher", "PublisherLogoFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithOne("RefreshToken")
                        .HasForeignKey("BookShopAPI.Domain.Entities.RefreshToken", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.User", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.FileEntity", "File")
                        .WithOne("User")
                        .HasForeignKey("BookShopAPI.Domain.Entities.User", "UserAvatarFileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.UserClaim", b =>
                {
                    b.HasOne("BookShopAPI.Domain.Entities.Claim", "Claim")
                        .WithMany("UserClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShopAPI.Domain.Entities.User", "User")
                        .WithOne("UserClaim")
                        .HasForeignKey("BookShopAPI.Domain.Entities.UserClaim", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Basket", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Book", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("BookPictures");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Claim", b =>
                {
                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.CommentEntity", b =>
                {
                    b.Navigation("CommentRatings");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.District", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Neighbourhoods");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.FileEntity", b =>
                {
                    b.Navigation("Author");

                    b.Navigation("BookPicture");

                    b.Navigation("Publisher");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Language", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Neighbourhood", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.OtpAuthentication", b =>
                {
                    b.Navigation("OtpRecoveryCodes");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.PhoneNumberEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Province", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookShopAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Baskets");

                    b.Navigation("CommentRatings");

                    b.Navigation("Comments");

                    b.Navigation("MailAuthentication");

                    b.Navigation("MailComfirmCode");

                    b.Navigation("Orders");

                    b.Navigation("OtpAuthentication");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("RefreshToken");

                    b.Navigation("UserClaim");
                });
#pragma warning restore 612, 618
        }
    }
}
